From 64c1b30cae8e8014519267d985a5903e292f58da Mon Sep 17 00:00:00 2001
From: Simon Hanna <simon.h4nn4@gmail.com>
Date: Wed, 24 Aug 2016 02:32:49 +0200
Subject: [PATCH 1/6] Add support for python3

---
 django_mailman3/lib/mailman.py        |  7 ++++---
 django_mailman3/lib/scrub.py          |  7 ++++---
 django_mailman3/tests/test_mailman.py |  2 +-
 django_mailman3/tests/test_scrub.py   | 12 +++++++-----
 django_mailman3/tests/utils.py        |  2 +-
 django_mailman3/urls.py               |  2 +-
 tox.ini                               |  2 +-
 7 files changed, 19 insertions(+), 15 deletions(-)

diff --git a/django_mailman3/lib/mailman.py b/django_mailman3/lib/mailman.py
index 1100d5c..d48d27d 100644
--- a/django_mailman3/lib/mailman.py
+++ b/django_mailman3/lib/mailman.py
@@ -22,10 +22,11 @@
 
 from __future__ import absolute_import, unicode_literals
 
-from urllib2 import HTTPError
+from django.utils.six.moves.urllib.error import HTTPError
 
 from allauth.account.models import EmailAddress
 from django.conf import settings
+from django.utils.six import text_type
 from django_mailman3.lib.cache import cache
 from django.db import IntegrityError
 from mailmanclient import Client as MailmanClient, MailmanConnectionError
@@ -80,7 +81,7 @@ def get_mailman_user_id(user):
     mm_user = get_mailman_user(user)
     if mm_user is None:
         return None
-    return unicode(mm_user.user_id)
+    return text_type(mm_user.user_id)
 
 
 def get_subscriptions(user):
@@ -112,7 +113,7 @@ def add_address_to_mailman_user(user, address):
         logger.info("Could not find or create a Mailman user for %s",
                     user.username)
         return
-    existing_addresses = [unicode(addr) for addr in mm_user.addresses]
+    existing_addresses = [text_type(addr) for addr in mm_user.addresses]
     if address not in existing_addresses:
         # Associate it with the user.
         try:
diff --git a/django_mailman3/lib/scrub.py b/django_mailman3/lib/scrub.py
index 546e56d..31165a0 100644
--- a/django_mailman3/lib/scrub.py
+++ b/django_mailman3/lib/scrub.py
@@ -26,6 +26,7 @@ import re
 import binascii
 
 from django.utils.six import integer_types
+from django.utils.six import text_type
 from mimetypes import guess_all_extensions
 from email.header import decode_header, make_header
 from email.errors import HeaderParseError
@@ -109,7 +110,7 @@ class Scrubber(object):
         # types
         for part_num, part in enumerate(self.msg.walk()):
             ctype = part.get_content_type()
-            if not isinstance(ctype, unicode):
+            if not isinstance(ctype, text_type):
                 ctype = ctype.decode("ascii")
             # If the part is text/plain, we leave it alone
             if ctype == 'text/plain':
@@ -135,7 +136,7 @@ class Scrubber(object):
             elif part.get_payload() and not part.is_multipart():
                 payload = part.get_payload(decode=True)
                 ctype = part.get_content_type()
-                if not isinstance(ctype, unicode):
+                if not isinstance(ctype, text_type):
                     ctype.decode("ascii")
                 # XXX Under email 2.5, it is possible that payload will be
                 # None. This can happen when you have a Content-Type:
@@ -218,7 +219,7 @@ class Scrubber(object):
         # types, e.g. image/jpg (should be image/jpeg).  For now we just store
         # such things as application/octet-streams since that seems the safest.
         ctype = part.get_content_type()
-        if not isinstance(ctype, unicode):
+        if not isinstance(ctype, text_type):
             ctype = ctype.decode("ascii")
         charset = get_charset(part, default=None, guess=False)
         # i18n file name is encoded
diff --git a/django_mailman3/tests/test_mailman.py b/django_mailman3/tests/test_mailman.py
index 0180d54..a97b1df 100644
--- a/django_mailman3/tests/test_mailman.py
+++ b/django_mailman3/tests/test_mailman.py
@@ -22,7 +22,7 @@
 
 from __future__ import absolute_import, print_function, unicode_literals
 
-from urllib2 import HTTPError
+from django.utils.six.moves.urllib.error import HTTPError
 
 from allauth.account.models import EmailAddress
 from django.contrib.auth.models import User
diff --git a/django_mailman3/tests/test_scrub.py b/django_mailman3/tests/test_scrub.py
index 8731bf6..18dbd88 100644
--- a/django_mailman3/tests/test_scrub.py
+++ b/django_mailman3/tests/test_scrub.py
@@ -27,6 +27,8 @@ from email.message import Message
 from email import message_from_file
 from traceback import format_exc
 
+from django.utils.six import text_type
+
 from django_mailman3.lib.scrub import Scrubber
 from django_mailman3.tests.utils import get_test_file
 
@@ -123,7 +125,7 @@ class TestScrubber(unittest.TestCase):
         scrubber = Scrubber(msg)
         contents = scrubber.scrub()[0]
         self.assertTrue(
-            isinstance(contents, unicode),
+            isinstance(contents, text_type),
             u"Scrubbed content should always be unicode")
 
     def test_non_ascii_payload(self):
@@ -133,7 +135,7 @@ class TestScrubber(unittest.TestCase):
                 msg = message_from_file(email_file)
             scrubber = Scrubber(msg)
             contents = scrubber.scrub()[0]
-            self.assertTrue(isinstance(contents, unicode))
+            self.assertTrue(isinstance(contents, text_type))
             self.assertEqual(
                 contents,
                 u'This message contains non-ascii '
@@ -150,7 +152,7 @@ class TestScrubber(unittest.TestCase):
             import traceback
             print(traceback.format_exc())
             self.fail(e)  # codec not found
-        self.assertTrue(isinstance(contents, unicode))
+        self.assertTrue(isinstance(contents, text_type))
 
     def test_attachment_4(self):
         with open(get_test_file("attachment-4.txt")) as email_file:
@@ -226,5 +228,5 @@ class TestScrubber(unittest.TestCase):
             attachments = scrubber.scrub()[1]
             for attachment in attachments:
                 name = attachment[1]
-                self.assertTrue(isinstance(name, unicode),
+                self.assertTrue(isinstance(name, text_type),
                                 "attachment %r must be unicode" % name)
diff --git a/django_mailman3/tests/utils.py b/django_mailman3/tests/utils.py
index 986f499..6abf404 100644
--- a/django_mailman3/tests/utils.py
+++ b/django_mailman3/tests/utils.py
@@ -22,7 +22,7 @@ from __future__ import absolute_import, print_function, unicode_literals
 
 import logging
 import os
-from StringIO import StringIO
+from django.utils.six import StringIO
 
 import mailmanclient
 from django.contrib.messages.storage.cookie import CookieStorage
diff --git a/django_mailman3/urls.py b/django_mailman3/urls.py
index 0cf1f4f..4731b3e 100644
--- a/django_mailman3/urls.py
+++ b/django_mailman3/urls.py
@@ -27,5 +27,5 @@ from django_mailman3.views.profile import user_profile
 
 
 urlpatterns = [
-    url(r'^user-profile/', user_profile, name='mm_user_profile'),
+    url(r'^user-profile/$', user_profile, name='mm_user_profile'),
     ]
diff --git a/tox.ini b/tox.ini
index d6decfd..b6c8d32 100644
--- a/tox.ini
+++ b/tox.ini
@@ -1,5 +1,5 @@
 [tox]
-envlist = py27-django{18,19,110,111},lint
+envlist = py{27,34,35}-django{18,19,110, 111},lint
 
 
 [testenv]
-- 
2.13.6


From db6ce16c7ec56bc77ee13b819331e554c449928f Mon Sep 17 00:00:00 2001
From: Simon Hanna <simon.h4nn4@gmail.com>
Date: Wed, 24 Aug 2016 02:36:51 +0200
Subject: [PATCH 2/6] Add python3 to gitlab CI

---
 .gitlab-ci.yml | 30 +++++++++++++++++++++++++++---
 1 file changed, 27 insertions(+), 3 deletions(-)

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index 7c04e76..91aeaae 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -1,17 +1,41 @@
 image: maxking/mailman-ci-runner
 
-django-1.8:
+py27-django-1.8:
   script:
   - tox -e py27-django18-head
 
-django-1.9:
+py27-django-1.9:
   script:
   - tox -e py27-django19-head
 
-django-1.10:
+py27-django-1.10:
   script:
   - tox -e py27-django110-head
 
+py34-django-1.8:
+  script:
+  - tox -e py34-django18-head
+
+py34-django-1.9:
+  script:
+  - tox -e py34-django19-head
+
+py34-django-1.10:
+  script:
+  - tox -e py34-django110-head
+
+py35-django-1.8:
+  script:
+  - tox -e py35-django18-head
+
+py35-django-1.9:
+  script:
+  - tox -e py35-django19-head
+
+py35-django-1.10:
+  script:
+  - tox -e py35-django110-head
+
 lint:
   script:
   - tox -e lint
-- 
2.13.6


From 33bfb068dd3fc7cb1df7111d6c24a0785548a39c Mon Sep 17 00:00:00 2001
From: Simon Hanna <simon.h4nn4@gmail.com>
Date: Fri, 2 Sep 2016 22:58:22 +0200
Subject: [PATCH 3/6] Use __str__ instead of __unicode__

---
 django_mailman3/models.py | 11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

diff --git a/django_mailman3/models.py b/django_mailman3/models.py
index 02e8450..78593ea 100644
--- a/django_mailman3/models.py
+++ b/django_mailman3/models.py
@@ -28,27 +28,30 @@ from django.conf import settings
 from django.contrib import admin
 from django.contrib.sites.models import Site
 from django.db import models
+from django.utils.encoding import python_2_unicode_compatible
 
 
+@python_2_unicode_compatible
 class Profile(models.Model):
     user = models.OneToOneField(settings.AUTH_USER_MODEL,
                                 related_name="mailman_profile")
     TIMEZONES = sorted([(tz, tz) for tz in pytz.common_timezones])
     timezone = models.CharField(max_length=100, choices=TIMEZONES, default="")
 
-    def __unicode__(self):
-        return '<Mailman profile for %s>' % (unicode(self.user.username))
+    def __str__(self):
+        return '<Mailman profile for %s>' % self.user.username
 
 
 admin.site.register(Profile)
 
 
+@python_2_unicode_compatible
 class MailDomain(models.Model):
     site = models.ForeignKey(Site, related_name="mailman_domains")
     mail_domain = models.CharField(max_length=255, db_index=True, unique=True)
 
-    def __unicode__(self):
-        return '<Mailman domain %s>' % (unicode(self.mail_domain))
+    def __str__(self):
+        return '<Mailman domain %s>' % self.mail_domain
 
 
 admin.site.register(MailDomain)
-- 
2.13.6


From bd5c5d3adda418f530ed2b1c0ef910953ac0ae27 Mon Sep 17 00:00:00 2001
From: Simon Hanna <simon.h4nn4@gmail.com>
Date: Wed, 19 Apr 2017 00:07:25 +0200
Subject: [PATCH 4/6] Normal operation should be possible

---
 django_mailman3/lib/scrub.py | 38 ++++++++++++++++++++++----------------
 setup.py                     |  1 +
 2 files changed, 23 insertions(+), 16 deletions(-)

diff --git a/django_mailman3/lib/scrub.py b/django_mailman3/lib/scrub.py
index 31165a0..6e7cda8 100644
--- a/django_mailman3/lib/scrub.py
+++ b/django_mailman3/lib/scrub.py
@@ -25,8 +25,9 @@ import os
 import re
 import binascii
 
-from django.utils.six import integer_types
-from django.utils.six import text_type
+from builtins import str as text
+from django.utils.six import integer_types, text_type
+from django.utils import six
 from mimetypes import guess_all_extensions
 from email.header import decode_header, make_header
 from email.errors import HeaderParseError
@@ -62,8 +63,12 @@ def get_charset(message, default="ascii", guess=False):
     http://ginstrom.com/scribbles/2007/11/19/parsing-multilingual-email-with-python/
     """
     if message.get_content_charset():
+        if six.PY3:
+            return message.get_content_charset()
         return message.get_content_charset().decode("ascii")
     if message.get_charset():
+        if six.PY3:
+            return message.get_charset()
         return message.get_charset().decode("ascii")
     charset = default
     if not guess:
@@ -85,7 +90,7 @@ def oneline(s):
     """Inspired by mailman.utilities.string.oneline"""
     try:
         h = make_header(decode_header(s))
-        ustr = h.__unicode__()
+        ustr = text(h)
         return ''.join(ustr.splitlines())
     except (LookupError, UnicodeError, ValueError, HeaderParseError):
         # possibly charset problem. return with undecoded string in one line.
@@ -110,14 +115,15 @@ class Scrubber(object):
         # types
         for part_num, part in enumerate(self.msg.walk()):
             ctype = part.get_content_type()
-            if not isinstance(ctype, text_type):
+            if not isinstance(ctype, text_type) and six.PY2:
                 ctype = ctype.decode("ascii")
             # If the part is text/plain, we leave it alone
             if ctype == 'text/plain':
                 disposition = part.get('content-disposition')
-                if disposition and disposition.decode(
+                if disposition and ((six.PY2 and disposition.decode(
                         "ascii", "replace"
-                        ).strip().startswith("attachment"):
+                        ).strip().startswith("attachment")) or (six.PY3 and
+                            disposition.strip().startswith("attachment"))):
                     # part is attached
                     attachments.append(self.parse_attachment(part, part_num))
                     part.set_payload('')
@@ -159,7 +165,7 @@ class Scrubber(object):
             # BAW: Martin's original patch suggested we might want to try
             # generalizing to utf-8, and that's probably a good idea
             # (eventually).
-            text = []
+            result = []
             for part in self.msg.walk():
                 # TK: bug-id 1099138 and multipart
                 # MAS test payload - if part may fail if there are no headers.
@@ -191,25 +197,25 @@ class Scrubber(object):
                     # Replace funny characters.  We use errors='replace'
                     t = t.decode('ascii', 'replace')
                 # Separation is useful
-                if isinstance(t, basestring):
+                if isinstance(t, text):
                     if not t.endswith('\n'):
                         t += '\n'
-                    text.append(t)
+                    result.append(t)
 
-            text = u"\n".join(text)
+            result = "\n".join(result)
         else:
-            text = self.msg.get_payload(decode=True)
+            result = self.msg.get_payload(decode=True)
             charset = get_charset(self.msg, guess=True)
             try:
-                text = text.decode(charset, "replace")
+                result= result.decode(charset, "replace")
             except (UnicodeError, LookupError, ValueError, AssertionError):
-                text = text.decode('ascii', 'replace')
+                result = result.decode('ascii', 'replace')
 
-            next_part_match = NEXT_PART.search(text)
+            next_part_match = NEXT_PART.search(result)
             if next_part_match:
-                text = text[0:next_part_match.start(0)]
+                result= result[0:next_part_match.start(0)]
 
-        return (text, attachments)
+        return (result, attachments)
 
     def parse_attachment(self, part, counter, filter_html=True):
         # Store name, content-type and size
diff --git a/setup.py b/setup.py
index a0ba826..bc4da02 100755
--- a/setup.py
+++ b/setup.py
@@ -40,6 +40,7 @@ setup(
     install_requires=[
         'Django >= 1.8',
         'mailmanclient',
+        'future',
         'django-allauth',
         'django-gravatar2 >= 1.0.6',
         'pytz',
-- 
2.13.6


From b68e847801252758dc853e84594a728418e4762a Mon Sep 17 00:00:00 2001
From: Simon Hanna <simon.h4nn4@gmail.com>
Date: Wed, 19 Apr 2017 00:29:48 +0200
Subject: [PATCH 5/6] Add django 1.11 and python 3.6

---
 .gitlab-ci.yml | 28 ++++++++++++++++++++++++++++
 tox.ini        |  2 +-
 2 files changed, 29 insertions(+), 1 deletion(-)

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index 91aeaae..5c0251e 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -12,6 +12,10 @@ py27-django-1.10:
   script:
   - tox -e py27-django110-head
 
+py27-django-1.11:
+  script:
+  - tox -e py27-django111-head
+
 py34-django-1.8:
   script:
   - tox -e py34-django18-head
@@ -24,6 +28,10 @@ py34-django-1.10:
   script:
   - tox -e py34-django110-head
 
+py34-django-1.11:
+  script:
+  - tox -e py34-django111-head
+
 py35-django-1.8:
   script:
   - tox -e py35-django18-head
@@ -36,6 +44,26 @@ py35-django-1.10:
   script:
   - tox -e py35-django110-head
 
+py35-django-1.11:
+  script:
+  - tox -e py35-django111-head
+
+py36-django-1.8:
+  script:
+  - tox -e py36-django18-head
+
+py36-django-1.9:
+  script:
+  - tox -e py36-django19-head
+
+py36-django-1.10:
+  script:
+  - tox -e py36-django110-head
+
+py36-django-1.11:
+  script:
+  - tox -e py36-django111-head
+
 lint:
   script:
   - tox -e lint
diff --git a/tox.ini b/tox.ini
index b6c8d32..522f1c4 100644
--- a/tox.ini
+++ b/tox.ini
@@ -1,5 +1,5 @@
 [tox]
-envlist = py{27,34,35}-django{18,19,110, 111},lint
+envlist = py{27,34,35,36}-django{18,19,110, 111},lint
 
 
 [testenv]
-- 
2.13.6


From c493a84839d24902dfcb5706201e1889b3d0c2ed Mon Sep 17 00:00:00 2001
From: Simon Hanna <simon.h4nn4@gmail.com>
Date: Wed, 20 Sep 2017 12:23:02 +0200
Subject: [PATCH 6/6] Fix lint errors

---
 django_mailman3/lib/scrub.py | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/django_mailman3/lib/scrub.py b/django_mailman3/lib/scrub.py
index 136ccd6..8df3b61 100644
--- a/django_mailman3/lib/scrub.py
+++ b/django_mailman3/lib/scrub.py
@@ -122,8 +122,9 @@ class Scrubber(object):
                 disposition = part.get('content-disposition')
                 if disposition and ((six.PY2 and disposition.decode(
                         "ascii", "replace"
-                        ).strip().startswith("attachment")) or (six.PY3 and
-                            disposition.strip().startswith("attachment"))):
+                        ).strip().startswith("attachment")) or (
+                            six.PY3 and disposition.strip().startswith(
+                                "attachment"))):
                     # part is attached
                     attachments.append(self.parse_attachment(part, part_num))
                     part.set_payload('')
@@ -207,13 +208,13 @@ class Scrubber(object):
             result = self.msg.get_payload(decode=True)
             charset = get_charset(self.msg, guess=True)
             try:
-                result= result.decode(charset, "replace")
+                result = result.decode(charset, "replace")
             except (UnicodeError, LookupError, ValueError, AssertionError):
                 result = result.decode('ascii', 'replace')
 
             next_part_match = NEXT_PART.search(result)
             if next_part_match:
-                result= result[0:next_part_match.start(0)]
+                result = result[0:next_part_match.start(0)]
 
         return (result, attachments)
 
-- 
2.13.6

