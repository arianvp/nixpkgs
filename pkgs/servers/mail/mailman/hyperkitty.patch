diff --git a/hyperkitty/lib/incoming.py b/hyperkitty/lib/incoming.py
index 6decc10..773bca1 100644
--- a/hyperkitty/lib/incoming.py
+++ b/hyperkitty/lib/incoming.py
@@ -76,7 +76,7 @@ def add_to_list(list_name, message):
     try:
         from_name, from_email = parseaddr(message['From'])
         from_name = header_to_unicode(from_name).strip()
-        sender_address = from_email.decode("ascii").strip()
+        sender_address = from_email.strip()
     except (UnicodeDecodeError, UnicodeEncodeError):
         raise ValueError("Non-ascii sender address", message)
     if not sender_address:
diff --git a/hyperkitty/lib/utils.py b/hyperkitty/lib/utils.py
index fbf06bf..b783246 100644
--- a/hyperkitty/lib/utils.py
+++ b/hyperkitty/lib/utils.py
@@ -55,11 +55,11 @@ def get_message_id_hash(msg_id):
     details. Example:
     """
     msg_id = email.utils.unquote(msg_id)
-    return unicode(b32encode(sha1(msg_id).digest()))
+    return b32encode(sha1(msg_id.encode('utf-8')).digest()).decode('utf-8')
 
 
 def get_message_id(message):
-    msg_id = email.utils.unquote(message['Message-Id']).decode("ascii")
+    msg_id = email.utils.unquote(message['Message-Id'])
     # Protect against extremely long Message-Ids (there is no limit in the
     # email spec), it's set to VARCHAR(255) in the database
     if len(msg_id) >= 255:
@@ -78,8 +78,6 @@ def get_ref(message):
             "In-Reply-To" not in message):
         return None
     ref_id = message.get("In-Reply-To")
-    if ref_id is not None:
-        ref_id = ref_id.decode('ascii', 'ignore')
     if ref_id is None or not ref_id.strip():
         ref_id = message.get("References")
         if ref_id is not None and ref_id.strip():
@@ -91,7 +89,7 @@ def get_ref(message):
             if ref_id:
                 ref_id = ref_id.group(1)
     if ref_id is not None:
-        ref_id = ref_id[:254].decode("ascii")
+        ref_id = ref_id[:254]
     return ref_id
 
 
@@ -137,18 +135,8 @@ def header_to_unicode(header):
     """
     h_decoded = []
     for text, charset in decode_header(header):
-        if charset is None:
-            try:
-                h_decoded.append(unicode(text))
-            except UnicodeDecodeError:
-                h_decoded.append(unicode(text, "ascii", "replace"))
-        else:
-            try:
-                h_decoded.append(text.decode(charset))
-            except (LookupError, UnicodeDecodeError):
-                # Unknown encoding or decoding failed
-                h_decoded.append(text.decode("ascii", "replace"))
-    return " ".join(h_decoded)
+        h_decoded.append(text)
+    return ' '.join(h_decoded)
 
 
 def stripped_subject(mlist, subject):
diff --git a/hyperkitty/migrations/0013_mailinglist_id_1.py b/hyperkitty/migrations/0013_mailinglist_id_1.py
index 7ff19c6..5c2a4e6 100644
--- a/hyperkitty/migrations/0013_mailinglist_id_1.py
+++ b/hyperkitty/migrations/0013_mailinglist_id_1.py
@@ -37,7 +37,7 @@ class MailingListPrimaryKey(migrations.AlterField):
             'db_table': old_model._meta.db_table,
             'apps': Apps(),
         }
-        meta = type(b"Meta", tuple(), meta_contents)
+        meta = type("Meta", tuple(), meta_contents)
         body['Meta'] = meta
         body['__module__'] = old_model.__module__
 
diff --git a/hyperkitty/tasks.py b/hyperkitty/tasks.py
index 495c49c..bda5da4 100644
--- a/hyperkitty/tasks.py
+++ b/hyperkitty/tasks.py
@@ -79,7 +79,7 @@ class SingletonAsync(Async):
         # No space allowed in memcached keys. Use CRC32 on the arguments
         # to have a fast and sufficiently unique way to identify tasks.
         self._cache_key = "task:status:%s:%s" % (
-            func_name, crc32(repr(args) + repr(kwargs)) & 0xffffffff)
+            func_name, crc32((repr(args) + repr(kwargs)).encode('utf-8')) & 0xffffffff)
         super(SingletonAsync, self).__init__(
             unlock_and_call, func, self._cache_key, *args, **kwargs)
 
diff --git a/hyperkitty/templatetags/hk_generic.py b/hyperkitty/templatetags/hk_generic.py
index 4131cc5..ae8349b 100644
--- a/hyperkitty/templatetags/hk_generic.py
+++ b/hyperkitty/templatetags/hk_generic.py
@@ -49,19 +49,15 @@ SNIPPED_END_PGP = re.compile("^.*(END PGP SIGNATURE).*$", re.M)
 def listsort(value):
     if isinstance(value, dict):
         new_dict = OrderedDict()
-        key_list = value.keys()
-        key_list.sort()
+        key_list = sorted(value.keys())
         key_list.reverse()
         for key in key_list:
-            values = value[key]
-            values.sort()
+            values = sorted(value[key])
             values.reverse()
             new_dict[key] = values
         return new_dict.items()
     elif isinstance(value, list):
-        new_list = list(value)
-        new_list.sort()
-        return new_list
+        return sorted(value)
     else:
         return value
     listsort.is_safe = True
@@ -89,9 +85,6 @@ def truncatesmart(value, limit=80):
         # Fail silently.
         return value
 
-    # Make sure it's unicode
-    value = unicode(value)
-
     # Return the string itself if length is smaller or equal to the limit
     if len(value) <= limit:
         return value
diff --git a/hyperkitty/views/mailman.py b/hyperkitty/views/mailman.py
index fe61c50..fe25472 100644
--- a/hyperkitty/views/mailman.py
+++ b/hyperkitty/views/mailman.py
@@ -23,9 +23,14 @@
 from __future__ import absolute_import, unicode_literals
 
 import json
-from email import message_from_file
 from functools import wraps
 
+try:
+    from email import message_from_binary_file as mail_parse
+except ImportError:
+    # Python 2 compat
+    from email import message_from_file as mail_parse
+
 from django.conf import settings
 from django.core.exceptions import SuspiciousOperation, ImproperlyConfigured
 from django.core.urlresolvers import reverse
@@ -109,7 +114,7 @@ def archive(request):
     mlist_fqdn = request.POST["mlist"]
     if "message" not in request.FILES:
         raise SuspiciousOperation
-    msg = message_from_file(request.FILES['message'])
+    msg = mail_parse(request.FILES['message'])
     try:
         add_to_list(mlist_fqdn, msg)
     except DuplicateMessage as e:
